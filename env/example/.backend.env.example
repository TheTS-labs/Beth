APP_PORT=8081 # The port on which the Express.JS server will be started

# >>> Credentials for Postgres database >>>
POSTGRES_HOST="postgres"
POSTGRES_PORT=5432
POSTGRES_USER="..."
POSTGRES_PASSWORD="..."
POSTGRES_DB="..."
# <<< Credentials for Postgres database <<<

# Use Redis? The application will fail if it cannot connect to the Redis server at `localhost:6379`
REDIS_REQUIRED="false"

# https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin
ACCESS_CONTROL_ALLOW_ORIGIN_HEADER="localhost:3000" 

JWT_TOKEN_SECRET="secret" # Secret key for signing JWT tokens

# The `RECURSIVE_SEARCH_MULTIPLIER` parameter is a configuration value that determines
# the number of records retrieved in a recursive search. In the code, when the search
# function is called, an initial search is performed using the given search parameters.
# If there are no matching records in the primary results, a recursive search is conducted
# with a broader scope to find additional records. The multiplier, obtained from the
# `RECURSIVE_SEARCH_MULTIPLIER` configuration value, is used to calculate the number of records
# retrieved in the recursive search. The calculation is done by multiplying the number of
# records specified in the original search query or the previous iteration by the multiplier.
# This allows for dynamically changing the search scope of the recursive search based on the
# configuration value. For example, if the multiplier is 2 and the initial search retrieves
# 10 records, the recursive search will attempt to find 20 records in the next iteration,
# 40 in the next, and so on. By adjusting the `RECURSIVE_SEARCH_MULTIPLIER` value, the
# aggressiveness or conservatism of the recursive search scope can be controlled.
# https://github.com/TheTS-labs/Beth/blob/Tests/backend/endpoints/post/post_endpoint.ts#L166
RECURSIVE_SEARCH_MULTIPLIER="2"

# >>> Log levels >>>
# For `NODE_ENV == "test"` the log level is specified independently
LOG_LEVEL="response"
TEST_LOG_LEVEL="quiet"
# <<< Log levels <<<

# >>> Cache expiration time for different records >>>
# Time is given in seconds
USER_EX=600
USER_PERMISSIONS_EX=600
POST_EX=300
POST_REPLIES_EX=600
HOT_TAGS_EX=1200
VOTE_EX=600
# <<< Cache expiration time for different records <<<

RUN_SEED=0 # Run the `yarn backend:seed` command during Docker Compose(`migration` service) startup?

NODE_ENV="development"